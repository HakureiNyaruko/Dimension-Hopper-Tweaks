package mods.thecomputerizer.dimhoppertweaks.mixin.mods.psi;

import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Overwrite;
import vazkii.psi.api.PsiAPI;
import vazkii.psi.common.spell.base.ModSpellPieces;
import vazkii.psi.common.spell.constant.PieceConstantE;
import vazkii.psi.common.spell.constant.PieceConstantNumber;
import vazkii.psi.common.spell.constant.PieceConstantPi;
import vazkii.psi.common.spell.constant.PieceConstantWrapper;
import vazkii.psi.common.spell.operator.entity.*;
import vazkii.psi.common.spell.operator.number.*;
import vazkii.psi.common.spell.operator.number.trig.PieceOperatorAcos;
import vazkii.psi.common.spell.operator.number.trig.PieceOperatorAsin;
import vazkii.psi.common.spell.operator.number.trig.PieceOperatorCos;
import vazkii.psi.common.spell.operator.number.trig.PieceOperatorSin;
import vazkii.psi.common.spell.operator.vector.*;
import vazkii.psi.common.spell.other.PieceConnector;
import vazkii.psi.common.spell.other.PieceErrorSuppressor;
import vazkii.psi.common.spell.selector.*;
import vazkii.psi.common.spell.selector.entity.*;
import vazkii.psi.common.spell.trick.*;
import vazkii.psi.common.spell.trick.block.*;
import vazkii.psi.common.spell.trick.entity.*;
import vazkii.psi.common.spell.trick.infusion.PieceTrickEbonyIvory;
import vazkii.psi.common.spell.trick.infusion.PieceTrickGreaterInfusion;
import vazkii.psi.common.spell.trick.infusion.PieceTrickInfusion;
import vazkii.psi.common.spell.trick.potion.*;

import static vazkii.psi.common.spell.base.ModSpellPieces.*;

@Mixin(value = ModSpellPieces.class,remap = false)
public abstract class MixinModSpellPieces {

    /**
     * @author The_Computerizer
     * @reason Remove smelting tricks from PSI registery
     */
    @SuppressWarnings("SpellCheckingInspection")
    @Overwrite
    public static void init() {
        selectorCaster = register(PieceSelectorCaster.class,"selectorCaster","tutorial1");
        selectorFocalPoint = register(PieceSelectorFocalPoint.class,"selectorFocalPoint","projectiles", true);
        selectorNearbyItems = register(PieceSelectorNearbyItems.class,"selectorNearbyItems","entitiesIntro");
        selectorNearbyLiving = register(PieceSelectorNearbyLiving.class,"selectorNearbyLiving","entitiesIntro");
        selectorNearbyEnemies = register(PieceSelectorNearbyEnemies.class,"selectorNearbyEnemies","entitiesIntro");
        selectorNearbyAnimals = register(PieceSelectorNearbyAnimals.class,"selectorNearbyAnimals","entitiesIntro");
        selectorNearbyProjectiles = register(PieceSelectorNearbyProjectiles.class,"selectorNearbyProjectiles","entitiesIntro");
        selectorNearbySmeltables = register(PieceSelectorNearbySmeltables.class,"selectorNearbySmeltables","smeltery");
        selectorLoopcastIndex = register(PieceSelectorLoopcastIndex.class,"selectorLoopcastIndex","loopcasting",true);
        selectorBlockBroken = register(PieceSelectorBlockBroken.class,"selectorBlockBroken","toolCasting",true);
        selectorBlockSideBroken = register(PieceSelectorBlockSideBroken.class,"selectorBlockSideBroken","toolCasting");
        selectorAttackTarget = register(PieceSelectorAttackTarget.class,"selectorAttackTarget","toolCasting");
        selectorSneakStatus = register(PieceSelectorSneakStatus.class,"selectorSneakStatus","flowControl");
        selectorTime = register(PieceSelectorTime.class,"selectorTime","exosuitCasting",true);
        selectorAttacker = register(PieceSelectorAttacker.class,"selectorAttacker","exosuitCasting");
        selectorDamageTaken = register(PieceSelectorDamageTaken.class,"selectorDamageTaken","exosuitCasting");
        selectorRulerVector = register(PieceSelectorRulerVector.class,"selectorRulerVector","projectiles");
        selectorItemPresence = register(PieceSelectorItemPresence.class,"selectorItemPresence","detectionDynamics");
        selectorBlockPresence = register(PieceSelectorBlockPresence.class,"selectorBlockPresence","detectionDynamics");
        selectorSaveVector = register(PieceSelectorSavedVector.class,"selectorSavedVector","memoryManagement");
        selectorEidosChangelog = register(PieceSelectorEidosChangelog.class,"selectorEidosChangelog","eidosReversal");
        operatorSum = register(PieceOperatorSum.class,"operatorSum","numbersIntro",true);
        operatorSubtract = register(PieceOperatorSubtract.class,"operatorSubtract","numbersIntro");
        operatorMultiply = register(PieceOperatorMultiply.class,"operatorMultiply","numbersIntro");
        operatorDivide = register(PieceOperatorDivide.class,"operatorDivide","numbersIntro");
        operatorAbsolute = register(PieceOperatorAbsolute.class,"operatorAbsolute","numbersIntro");
        operatorInverse = register(PieceOperatorInverse.class,"operatorInverse","numbersIntro");
        operatorModulus = register(PieceOperatorModulus.class,"operatorModulus","loopcasting");
        operatorRandom = register(PieceOperatorRandom.class,"operatorRandom","elementalArts");
        operatorIntegerDivide = register(PieceOperatorIntegerDivide.class,"operatorIntegerDivide","loopcasting");
        operatorSin = register(PieceOperatorSin.class,"operatorSin","trignometry");
        operatorCos = register(PieceOperatorCos.class,"operatorCos","trignometry");
        operatorAsin = register(PieceOperatorAsin.class,"operatorAsin","trignometry");
        operatorAcos = register(PieceOperatorAcos.class,"operatorAcos","trignometry");
        operatorMin = register(PieceOperatorMin.class,"operatorMin","secondaryOperators");
        operatorMax = register(PieceOperatorMax.class,"operatorMax","secondaryOperators");
        operatorSquare = register(PieceOperatorSquare.class,"operatorSquare","secondaryOperators",true);
        operatorCube = register(PieceOperatorCube.class,"operatorCube","secondaryOperators");
        operatorPower = register(PieceOperatorPower.class,"operatorPower","secondaryOperators");
        operatorSquareRoot = register(PieceOperatorSquareRoot.class,"operatorSquareRoot","secondaryOperators");
        operatorLog = register(PieceOperatorLog.class,"operatorLog","secondaryOperators");
        operatorCeiling = register(PieceOperatorCeiling.class,"operatorCeiling","secondaryOperators");
        operatorFloor = register(PieceOperatorFloor.class,"operatorFloor","secondaryOperators");
        operatorRound = register(PieceOperatorRound.class,"operatorRound","secondaryOperators");
        operatorEntityPosition = register(PieceOperatorEntityPosition.class,"operatorEntityPosition","tutorial4");
        operatorEntityLook = register(PieceOperatorEntityLook.class,"operatorEntityLook","tutorial3");
        operatorEntityMotion = register(PieceOperatorEntityMotion.class,"operatorEntityMotion","entitiesIntro");
        operatorEntityMotion = register(PieceOperatorEntityAxialLook.class,"operatorEntityAxialLook","blockWorks");
        operatorClosestToPoint = register(PieceOperatorClosestToPoint.class,"operatorClosestToPoint","entitiesIntro",true);
        operatorRandomEntity = register(PieceOperatorRandomEntity.class,"operatorRandomEntity","entitiesIntro");
        operatorFocusedEntity = register(PieceOperatorFocusedEntity.class,"operatorFocusedEntity","entitiesIntro");
        operatorListAdd = register(PieceOperatorListAdd.class,"operatorListAdd","entitiesIntro");
        operatorListRemove = register(PieceOperatorListRemove.class,"operatorListRemove","entitiesIntro");
        operatorVectorRaycast = register(PieceOperatorVectorRaycast.class,"operatorVectorRaycast","tutorial4");
        operatorVectorSum = register(PieceOperatorVectorSum.class,"operatorVectorSum","vectorsIntro");
        operatorVectorSubtract = register(PieceOperatorVectorSubtract.class,"operatorVectorSubtract","vectorsIntro");
        operatorVectorMultiply = register(PieceOperatorVectorMultiply.class,"operatorVectorMultiply","vectorsIntro");
        operatorVectorDivide = register(PieceOperatorVectorDivide.class,"operatorVectorDivide","vectorsIntro");
        operatorVectorCrossProduct = register(PieceOperatorVectorCrossProduct.class,"operatorVectorCrossProduct","vectorsIntro");
        operatorVectorNormalize = register(PieceOperatorVectorNormalize.class,"operatorVectorNormalize","vectorsIntro");
        operatorVectorNegate = register(PieceOperatorVectorNegate.class,"operatorVectorNegate","vectorsIntro");
        operatorVectorMagnitude = register(PieceOperatorVectorMagnitude.class,"operatorVectorMagnitude","vectorsIntro");
        operatorVectorConstruct = register(PieceOperatorVectorConstruct.class,"operatorVectorConstruct","vectorsIntro",true);
        operatorVectorExtractX = register(PieceOperatorVectorExtractX.class,"operatorVectorExtractX","vectorsIntro");
        operatorVectorExtractY = register(PieceOperatorVectorExtractY.class,"operatorVectorExtractY","vectorsIntro");
        operatorVectorExtractZ = register(PieceOperatorVectorExtractZ.class,"operatorVectorExtractZ","vectorsIntro");
        operatorVectorRaycastAxis = register(PieceOperatorVectorRaycastAxis.class,"operatorVectorRaycastAxis","blockWorks");
        operatorVectorProject = register(PieceOperatorVectorProject.class,"operatorVectorProject","blockWorks");
        operatorVectorDotProduct = register(PieceOperatorVectorDotProduct.class,"operatorVectorDotProduct","trignometry");
        constantNumber = register(PieceConstantNumber.class,"constantNumber","tutorial2",true);
        constantPi = register(PieceConstantPi.class,"constantPi","trignometry",true);
        constantE = register(PieceConstantE.class,"constantE","secondaryOperators");
        constantWrapper = register(PieceConstantWrapper.class,"constantWrapper","flowControl");
        connector = register(PieceConnector.class,"connector","tutorial2");
        errorSuppressor = register(PieceErrorSuppressor.class,"errorSuppressor","tutorial4");
        trickDebug = register(PieceTrickDebug.class,"trickDebug","tutorial1",true);
        trickDelay = register(PieceTrickDelay.class,"trickDelay","flowControl",true);
        trickDie = register(PieceTrickDie.class,"trickDie","flowControl");
        trickEvaluate = register(PieceTrickEvaluate.class,"trickEvaluate","flowControl");
        trickAddMotion = register(PieceTrickAddMotion.class,"trickAddMotion","tutorial3",true);
        trickExplode = register(PieceTrickExplode.class,"trickExplode","tutorial4",true);
        trickBreakBlock = register(PieceTrickBreakBlock.class,"trickBreakBlock","blockWorks");
        trickBreakInSequence = register(PieceTrickBreakInSequence.class,"trickBreakInSequence","blockWorks",true);
        trickPlaceBlock = register(PieceTrickPlaceBlock.class,"trickPlaceBlock","blockWorks");
        trickPlaceInSequence = register(PieceTrickPlaceInSequence.class,"trickPlaceInSequence","blockWorks");
        trickInfusion = register(PieceTrickInfusion.class,"trickInfusion","infusion",true);
        trickBlink = register(PieceTrickBlink.class,"trickBlink","movement",true);
        trickMassBlink = register(PieceTrickMassBlink.class,"trickMassBlink","movement");
        trickMassAddMotion = register(PieceTrickMassAddMotion.class,"trickMassAddMotion","movement");
        trickMassExodus = register(PieceTrickMassExodus.class,"trickMassExodus","movement");
        trickMoveBlock = register(PieceTrickMoveBlock.class,"trickMoveBlock","blockMovement",true);
        trickCollapseBlock = register(PieceTrickCollapseBlock.class,"trickCollapseBlock","blockMovement");
        trickSmite = register(PieceTrickSmite.class,"trickSmite","elementalArts",true);
        trickBlaze = register(PieceTrickBlaze.class,"trickBlaze","elementalArts");
        trickTorrent = register(PieceTrickTorrent.class,"trickTorrent","elementalArts");
        trickOvergrow = register(PieceTrickOvergrow.class,"trickOvergrow","elementalArts");
        trickGreaterInfusion = register(PieceTrickGreaterInfusion.class,"trickGreaterInfusion","greaterInfusion",true);
        trickEbonyIvory = register(PieceTrickEbonyIvory.class,"trickEbonyIvory","greaterInfusion");
        trickSpeed = register(PieceTrickSpeed.class,"trickSpeed","positiveEffects",true);
        trickHaste = register(PieceTrickHaste.class,"trickHaste","positiveEffects");
        trickStrength = register(PieceTrickStrength.class,"trickStrength","positiveEffects");
        trickJumpBoost = register(PieceTrickJumpBoost.class,"trickJumpBoost","positiveEffects");
        trickWaterBreathing = register(PieceTrickWaterBreathing.class,"trickWaterBreathing","positiveEffects");
        trickFireResistance = register(PieceTrickFireResistance.class,"trickFireResistance","positiveEffects");
        trickInvisibility = register(PieceTrickInvisibility.class,"trickInvisibility","positiveEffects");
        trickRegeneration = register(PieceTrickRegeneration.class,"trickRegeneration","positiveEffects");
        trickResistance = register(PieceTrickResistance.class,"trickResistance","positiveEffects");
        trickSlowness = register(PieceTrickSlowness.class,"trickSlowness","negativeEffects");
        trickWeakness = register(PieceTrickWeakness.class,"trickWeakness","negativeEffects");
        trickWither = register(PieceTrickWither.class,"trickWither","negativeEffects",true);
        trickIgnite = register(PieceTrickIgnite.class,"trickIgnite","negativeEffects");
        trickEidosAnchor = register(PieceTrickEidosAnchor.class,"trickEidosAnchor","eidosReversal");
        trickEidosReversal = register(PieceTrickEidosReversal.class,"trickEidosReversal","eidosReversal",true);
        trickConjureBlock = register(PieceTrickConjureBlock.class,"trickConjureBlock","blockConjuration",true);
        trickConjureLight = register(PieceTrickConjureLight.class,"trickConjureLight","blockConjuration");
        trickConjureBlockSequence = register(PieceTrickConjureBlockSequence.class,"trickConjureBlockSequence","blockConjuration");
        trickSwitchTargetSlot = register(PieceTrickSwitchTargetSlot.class,"trickSwitchTargetSlot","detectionDynamics",true);
        trickSaveVector = register(PieceTrickSaveVector.class,"trickSaveVector","memoryManagement",true);
        PsiAPI.setGroupRequirements("tutorial1",1);
        PsiAPI.setGroupRequirements("tutorial2",2,"tutorial1");
        PsiAPI.setGroupRequirements("tutorial3",3,"tutorial2");
        PsiAPI.setGroupRequirements("tutorial4",4,"tutorial3");
        PsiAPI.setGroupRequirements("numbersIntro",5,"tutorial4");
        PsiAPI.setGroupRequirements("vectorsIntro",5,"tutorial4");
        PsiAPI.setGroupRequirements("entitiesIntro",5,"tutorial4");
        PsiAPI.setGroupRequirements("projectiles",6,"entitiesIntro");
        PsiAPI.setGroupRequirements("blockWorks",6,"vectorsIntro");
        PsiAPI.setGroupRequirements("infusion",10,"vectorsIntro","entitiesIntro","numbersIntro");
        PsiAPI.setGroupRequirements("movement",11,"entitiesIntro");
        PsiAPI.setGroupRequirements("blockMovement",11,"blockWorks");
        PsiAPI.setGroupRequirements("elementalArts",11,"vectorsIntro");
        PsiAPI.setGroupRequirements("loopcasting",12,"infusion");
        PsiAPI.setGroupRequirements("greaterInfusion",15,"infusion");
        PsiAPI.setGroupRequirements("toolCasting",16,"greaterInfusion");
        PsiAPI.setGroupRequirements("positiveEffects",16,"greaterInfusion");
        PsiAPI.setGroupRequirements("negativeEffects",17,"positiveEffects");
        PsiAPI.setGroupRequirements("exosuitCasting",19,"greaterInfusion");
        PsiAPI.setGroupRequirements("trignometry",20,"greaterInfusion");
        PsiAPI.setGroupRequirements("smeltery",20,"greaterInfusion");
        PsiAPI.setGroupRequirements("flowControl",20,"greaterInfusion");
        PsiAPI.setGroupRequirements("blockConjuration",20,"greaterInfusion");
        PsiAPI.setGroupRequirements("detectionDynamics",21,"flowControl");
        PsiAPI.setGroupRequirements("memoryManagement",21,"flowControl");
        PsiAPI.setGroupRequirements("secondaryOperators",21,"trignometry");
        PsiAPI.setGroupRequirements("eidosReversal",24,"detectionDynamics","memoryManagement","exosuitCasting");
    }
}