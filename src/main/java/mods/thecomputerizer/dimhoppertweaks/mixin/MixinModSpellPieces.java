package mods.thecomputerizer.dimhoppertweaks.mixin;

import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Overwrite;
import vazkii.psi.api.PsiAPI;
import vazkii.psi.common.spell.base.ModSpellPieces;
import vazkii.psi.common.spell.constant.PieceConstantE;
import vazkii.psi.common.spell.constant.PieceConstantNumber;
import vazkii.psi.common.spell.constant.PieceConstantPi;
import vazkii.psi.common.spell.constant.PieceConstantWrapper;
import vazkii.psi.common.spell.operator.entity.*;
import vazkii.psi.common.spell.operator.number.*;
import vazkii.psi.common.spell.operator.number.trig.PieceOperatorAcos;
import vazkii.psi.common.spell.operator.number.trig.PieceOperatorAsin;
import vazkii.psi.common.spell.operator.number.trig.PieceOperatorCos;
import vazkii.psi.common.spell.operator.number.trig.PieceOperatorSin;
import vazkii.psi.common.spell.operator.vector.*;
import vazkii.psi.common.spell.other.PieceConnector;
import vazkii.psi.common.spell.other.PieceErrorSuppressor;
import vazkii.psi.common.spell.selector.*;
import vazkii.psi.common.spell.selector.entity.*;
import vazkii.psi.common.spell.trick.*;
import vazkii.psi.common.spell.trick.block.*;
import vazkii.psi.common.spell.trick.entity.*;
import vazkii.psi.common.spell.trick.infusion.PieceTrickEbonyIvory;
import vazkii.psi.common.spell.trick.infusion.PieceTrickGreaterInfusion;
import vazkii.psi.common.spell.trick.infusion.PieceTrickInfusion;
import vazkii.psi.common.spell.trick.potion.*;

import static vazkii.psi.common.spell.base.ModSpellPieces.register;

@Mixin(value = ModSpellPieces.class, remap = false)
public class MixinModSpellPieces {

    /**
     * @author The_Computerizer
     * @reason Remove smelting tricks from PSI registery
     */
    @SuppressWarnings("SpellCheckingInspection")
    @Overwrite
    public static void init() {
        ModSpellPieces.selectorCaster = register(PieceSelectorCaster.class, "selectorCaster", "tutorial1");
        ModSpellPieces.selectorFocalPoint = register(PieceSelectorFocalPoint.class, "selectorFocalPoint", "projectiles", true);
        ModSpellPieces.selectorNearbyItems = register(PieceSelectorNearbyItems.class, "selectorNearbyItems", "entitiesIntro");
        ModSpellPieces.selectorNearbyLiving = register(PieceSelectorNearbyLiving.class, "selectorNearbyLiving", "entitiesIntro");
        ModSpellPieces.selectorNearbyEnemies = register(PieceSelectorNearbyEnemies.class, "selectorNearbyEnemies", "entitiesIntro");
        ModSpellPieces.selectorNearbyAnimals = register(PieceSelectorNearbyAnimals.class, "selectorNearbyAnimals", "entitiesIntro");
        ModSpellPieces.selectorNearbyProjectiles = register(PieceSelectorNearbyProjectiles.class, "selectorNearbyProjectiles", "entitiesIntro");
        ModSpellPieces.selectorNearbySmeltables = register(PieceSelectorNearbySmeltables.class, "selectorNearbySmeltables", "smeltery");
        ModSpellPieces.selectorLoopcastIndex = register(PieceSelectorLoopcastIndex.class, "selectorLoopcastIndex", "loopcasting", true);
        ModSpellPieces.selectorBlockBroken = register(PieceSelectorBlockBroken.class, "selectorBlockBroken", "toolCasting", true);
        ModSpellPieces.selectorBlockSideBroken = register(PieceSelectorBlockSideBroken.class, "selectorBlockSideBroken", "toolCasting");
        ModSpellPieces.selectorAttackTarget = register(PieceSelectorAttackTarget.class, "selectorAttackTarget", "toolCasting");
        ModSpellPieces.selectorSneakStatus = register(PieceSelectorSneakStatus.class, "selectorSneakStatus", "flowControl");
        ModSpellPieces.selectorTime = register(PieceSelectorTime.class, "selectorTime", "exosuitCasting", true);
        ModSpellPieces.selectorAttacker = register(PieceSelectorAttacker.class, "selectorAttacker", "exosuitCasting");
        ModSpellPieces.selectorDamageTaken = register(PieceSelectorDamageTaken.class, "selectorDamageTaken", "exosuitCasting");
        ModSpellPieces.selectorRulerVector = register(PieceSelectorRulerVector.class, "selectorRulerVector", "projectiles");
        ModSpellPieces.selectorItemPresence = register(PieceSelectorItemPresence.class, "selectorItemPresence", "detectionDynamics");
        ModSpellPieces.selectorBlockPresence = register(PieceSelectorBlockPresence.class, "selectorBlockPresence", "detectionDynamics");
        ModSpellPieces.selectorSaveVector = register(PieceSelectorSavedVector.class, "selectorSavedVector", "memoryManagement");
        ModSpellPieces.selectorEidosChangelog = register(PieceSelectorEidosChangelog.class, "selectorEidosChangelog", "eidosReversal");
        ModSpellPieces.operatorSum = register(PieceOperatorSum.class, "operatorSum", "numbersIntro", true);
        ModSpellPieces.operatorSubtract = register(PieceOperatorSubtract.class, "operatorSubtract", "numbersIntro");
        ModSpellPieces.operatorMultiply = register(PieceOperatorMultiply.class, "operatorMultiply", "numbersIntro");
        ModSpellPieces.operatorDivide = register(PieceOperatorDivide.class, "operatorDivide", "numbersIntro");
        ModSpellPieces.operatorAbsolute = register(PieceOperatorAbsolute.class, "operatorAbsolute", "numbersIntro");
        ModSpellPieces.operatorInverse = register(PieceOperatorInverse.class, "operatorInverse", "numbersIntro");
        ModSpellPieces.operatorModulus = register(PieceOperatorModulus.class, "operatorModulus", "loopcasting");
        ModSpellPieces.operatorRandom = register(PieceOperatorRandom.class, "operatorRandom", "elementalArts");
        ModSpellPieces.operatorIntegerDivide = register(PieceOperatorIntegerDivide.class, "operatorIntegerDivide", "loopcasting");
        ModSpellPieces.operatorSin = register(PieceOperatorSin.class, "operatorSin", "trignometry");
        ModSpellPieces.operatorCos = register(PieceOperatorCos.class, "operatorCos", "trignometry");
        ModSpellPieces.operatorAsin = register(PieceOperatorAsin.class, "operatorAsin", "trignometry");
        ModSpellPieces.operatorAcos = register(PieceOperatorAcos.class, "operatorAcos", "trignometry");
        ModSpellPieces.operatorMin = register(PieceOperatorMin.class, "operatorMin", "secondaryOperators");
        ModSpellPieces.operatorMax = register(PieceOperatorMax.class, "operatorMax", "secondaryOperators");
        ModSpellPieces.operatorSquare = register(PieceOperatorSquare.class, "operatorSquare", "secondaryOperators", true);
        ModSpellPieces.operatorCube = register(PieceOperatorCube.class, "operatorCube", "secondaryOperators");
        ModSpellPieces.operatorPower = register(PieceOperatorPower.class, "operatorPower", "secondaryOperators");
        ModSpellPieces.operatorSquareRoot = register(PieceOperatorSquareRoot.class, "operatorSquareRoot", "secondaryOperators");
        ModSpellPieces.operatorLog = register(PieceOperatorLog.class, "operatorLog", "secondaryOperators");
        ModSpellPieces.operatorCeiling = register(PieceOperatorCeiling.class, "operatorCeiling", "secondaryOperators");
        ModSpellPieces.operatorFloor = register(PieceOperatorFloor.class, "operatorFloor", "secondaryOperators");
        ModSpellPieces.operatorRound = register(PieceOperatorRound.class, "operatorRound", "secondaryOperators");
        ModSpellPieces.operatorEntityPosition = register(PieceOperatorEntityPosition.class, "operatorEntityPosition", "tutorial4");
        ModSpellPieces.operatorEntityLook = register(PieceOperatorEntityLook.class, "operatorEntityLook", "tutorial3");
        ModSpellPieces.operatorEntityMotion = register(PieceOperatorEntityMotion.class, "operatorEntityMotion", "entitiesIntro");
        ModSpellPieces.operatorEntityMotion = register(PieceOperatorEntityAxialLook.class, "operatorEntityAxialLook", "blockWorks");
        ModSpellPieces.operatorClosestToPoint = register(PieceOperatorClosestToPoint.class, "operatorClosestToPoint", "entitiesIntro", true);
        ModSpellPieces.operatorRandomEntity = register(PieceOperatorRandomEntity.class, "operatorRandomEntity", "entitiesIntro");
        ModSpellPieces.operatorFocusedEntity = register(PieceOperatorFocusedEntity.class, "operatorFocusedEntity", "entitiesIntro");
        ModSpellPieces.operatorListAdd = register(PieceOperatorListAdd.class, "operatorListAdd", "entitiesIntro");
        ModSpellPieces.operatorListRemove = register(PieceOperatorListRemove.class, "operatorListRemove", "entitiesIntro");
        ModSpellPieces.operatorVectorRaycast = register(PieceOperatorVectorRaycast.class, "operatorVectorRaycast", "tutorial4");
        ModSpellPieces.operatorVectorSum = register(PieceOperatorVectorSum.class, "operatorVectorSum", "vectorsIntro");
        ModSpellPieces.operatorVectorSubtract = register(PieceOperatorVectorSubtract.class, "operatorVectorSubtract", "vectorsIntro");
        ModSpellPieces.operatorVectorMultiply = register(PieceOperatorVectorMultiply.class, "operatorVectorMultiply", "vectorsIntro");
        ModSpellPieces.operatorVectorDivide = register(PieceOperatorVectorDivide.class, "operatorVectorDivide", "vectorsIntro");
        ModSpellPieces.operatorVectorCrossProduct = register(PieceOperatorVectorCrossProduct.class, "operatorVectorCrossProduct", "vectorsIntro");
        ModSpellPieces.operatorVectorNormalize = register(PieceOperatorVectorNormalize.class, "operatorVectorNormalize", "vectorsIntro");
        ModSpellPieces.operatorVectorNegate = register(PieceOperatorVectorNegate.class, "operatorVectorNegate", "vectorsIntro");
        ModSpellPieces.operatorVectorMagnitude = register(PieceOperatorVectorMagnitude.class, "operatorVectorMagnitude", "vectorsIntro");
        ModSpellPieces.operatorVectorConstruct = register(PieceOperatorVectorConstruct.class, "operatorVectorConstruct", "vectorsIntro", true);
        ModSpellPieces.operatorVectorExtractX = register(PieceOperatorVectorExtractX.class, "operatorVectorExtractX", "vectorsIntro");
        ModSpellPieces.operatorVectorExtractY = register(PieceOperatorVectorExtractY.class, "operatorVectorExtractY", "vectorsIntro");
        ModSpellPieces.operatorVectorExtractZ = register(PieceOperatorVectorExtractZ.class, "operatorVectorExtractZ", "vectorsIntro");
        ModSpellPieces.operatorVectorRaycastAxis = register(PieceOperatorVectorRaycastAxis.class, "operatorVectorRaycastAxis", "blockWorks");
        ModSpellPieces.operatorVectorProject = register(PieceOperatorVectorProject.class, "operatorVectorProject", "blockWorks");
        ModSpellPieces.operatorVectorDotProduct = register(PieceOperatorVectorDotProduct.class, "operatorVectorDotProduct", "trignometry");
        ModSpellPieces.constantNumber = register(PieceConstantNumber.class, "constantNumber", "tutorial2", true);
        ModSpellPieces.constantPi = register(PieceConstantPi.class, "constantPi", "trignometry", true);
        ModSpellPieces.constantE = register(PieceConstantE.class, "constantE", "secondaryOperators");
        ModSpellPieces.constantWrapper = register(PieceConstantWrapper.class, "constantWrapper", "flowControl");
        ModSpellPieces.connector = register(PieceConnector.class, "connector", "tutorial2");
        ModSpellPieces.errorSuppressor = register(PieceErrorSuppressor.class, "errorSuppressor", "tutorial4");
        ModSpellPieces.trickDebug = register(PieceTrickDebug.class, "trickDebug", "tutorial1", true);
        ModSpellPieces.trickDelay = register(PieceTrickDelay.class, "trickDelay", "flowControl", true);
        ModSpellPieces.trickDie = register(PieceTrickDie.class, "trickDie", "flowControl");
        ModSpellPieces.trickEvaluate = register(PieceTrickEvaluate.class, "trickEvaluate", "flowControl");
        ModSpellPieces.trickAddMotion = register(PieceTrickAddMotion.class, "trickAddMotion", "tutorial3", true);
        ModSpellPieces.trickExplode = register(PieceTrickExplode.class, "trickExplode", "tutorial4", true);
        ModSpellPieces.trickBreakBlock = register(PieceTrickBreakBlock.class, "trickBreakBlock", "blockWorks");
        ModSpellPieces.trickBreakInSequence = register(PieceTrickBreakInSequence.class, "trickBreakInSequence", "blockWorks", true);
        ModSpellPieces.trickPlaceBlock = register(PieceTrickPlaceBlock.class, "trickPlaceBlock", "blockWorks");
        ModSpellPieces.trickPlaceInSequence = register(PieceTrickPlaceInSequence.class, "trickPlaceInSequence", "blockWorks");
        ModSpellPieces.trickInfusion = register(PieceTrickInfusion.class, "trickInfusion", "infusion", true);
        ModSpellPieces.trickBlink = register(PieceTrickBlink.class, "trickBlink", "movement", true);
        ModSpellPieces.trickMassBlink = register(PieceTrickMassBlink.class, "trickMassBlink", "movement");
        ModSpellPieces.trickMassAddMotion = register(PieceTrickMassAddMotion.class, "trickMassAddMotion", "movement");
        ModSpellPieces.trickMassExodus = register(PieceTrickMassExodus.class, "trickMassExodus", "movement");
        ModSpellPieces.trickMoveBlock = register(PieceTrickMoveBlock.class, "trickMoveBlock", "blockMovement", true);
        ModSpellPieces.trickCollapseBlock = register(PieceTrickCollapseBlock.class, "trickCollapseBlock", "blockMovement");
        ModSpellPieces.trickSmite = register(PieceTrickSmite.class, "trickSmite", "elementalArts", true);
        ModSpellPieces.trickBlaze = register(PieceTrickBlaze.class, "trickBlaze", "elementalArts");
        ModSpellPieces.trickTorrent = register(PieceTrickTorrent.class, "trickTorrent", "elementalArts");
        ModSpellPieces.trickOvergrow = register(PieceTrickOvergrow.class, "trickOvergrow", "elementalArts");
        ModSpellPieces.trickGreaterInfusion = register(PieceTrickGreaterInfusion.class, "trickGreaterInfusion", "greaterInfusion", true);
        ModSpellPieces.trickEbonyIvory = register(PieceTrickEbonyIvory.class, "trickEbonyIvory", "greaterInfusion");
        ModSpellPieces.trickSpeed = register(PieceTrickSpeed.class, "trickSpeed", "positiveEffects", true);
        ModSpellPieces.trickHaste = register(PieceTrickHaste.class, "trickHaste", "positiveEffects");
        ModSpellPieces.trickStrength = register(PieceTrickStrength.class, "trickStrength", "positiveEffects");
        ModSpellPieces.trickJumpBoost = register(PieceTrickJumpBoost.class, "trickJumpBoost", "positiveEffects");
        ModSpellPieces.trickWaterBreathing = register(PieceTrickWaterBreathing.class, "trickWaterBreathing", "positiveEffects");
        ModSpellPieces.trickFireResistance = register(PieceTrickFireResistance.class, "trickFireResistance", "positiveEffects");
        ModSpellPieces.trickInvisibility = register(PieceTrickInvisibility.class, "trickInvisibility", "positiveEffects");
        ModSpellPieces.trickRegeneration = register(PieceTrickRegeneration.class, "trickRegeneration", "positiveEffects");
        ModSpellPieces.trickResistance = register(PieceTrickResistance.class, "trickResistance", "positiveEffects");
        ModSpellPieces.trickSlowness = register(PieceTrickSlowness.class, "trickSlowness", "negativeEffects");
        ModSpellPieces.trickWeakness = register(PieceTrickWeakness.class, "trickWeakness", "negativeEffects");
        ModSpellPieces.trickWither = register(PieceTrickWither.class, "trickWither", "negativeEffects", true);
        ModSpellPieces.trickIgnite = register(PieceTrickIgnite.class, "trickIgnite", "negativeEffects");
        ModSpellPieces.trickEidosAnchor = register(PieceTrickEidosAnchor.class, "trickEidosAnchor", "eidosReversal");
        ModSpellPieces.trickEidosReversal = register(PieceTrickEidosReversal.class, "trickEidosReversal", "eidosReversal", true);
        ModSpellPieces.trickConjureBlock = register(PieceTrickConjureBlock.class, "trickConjureBlock", "blockConjuration", true);
        ModSpellPieces.trickConjureLight = register(PieceTrickConjureLight.class, "trickConjureLight", "blockConjuration");
        ModSpellPieces.trickConjureBlockSequence = register(PieceTrickConjureBlockSequence.class, "trickConjureBlockSequence", "blockConjuration");
        ModSpellPieces.trickSwitchTargetSlot = register(PieceTrickSwitchTargetSlot.class, "trickSwitchTargetSlot", "detectionDynamics", true);
        ModSpellPieces.trickSaveVector = register(PieceTrickSaveVector.class, "trickSaveVector", "memoryManagement", true);
        PsiAPI.setGroupRequirements("tutorial1", 1);
        PsiAPI.setGroupRequirements("tutorial2", 2, "tutorial1");
        PsiAPI.setGroupRequirements("tutorial3", 3, "tutorial2");
        PsiAPI.setGroupRequirements("tutorial4", 4, "tutorial3");
        PsiAPI.setGroupRequirements("numbersIntro", 5, "tutorial4");
        PsiAPI.setGroupRequirements("vectorsIntro", 5, "tutorial4");
        PsiAPI.setGroupRequirements("entitiesIntro", 5, "tutorial4");
        PsiAPI.setGroupRequirements("projectiles", 6, "entitiesIntro");
        PsiAPI.setGroupRequirements("blockWorks", 6, "vectorsIntro");
        PsiAPI.setGroupRequirements("infusion", 10, "vectorsIntro", "entitiesIntro", "numbersIntro");
        PsiAPI.setGroupRequirements("movement", 11, "entitiesIntro");
        PsiAPI.setGroupRequirements("blockMovement", 11, "blockWorks");
        PsiAPI.setGroupRequirements("elementalArts", 11, "vectorsIntro");
        PsiAPI.setGroupRequirements("loopcasting", 12, "infusion");
        PsiAPI.setGroupRequirements("greaterInfusion", 15, "infusion");
        PsiAPI.setGroupRequirements("toolCasting", 16, "greaterInfusion");
        PsiAPI.setGroupRequirements("positiveEffects", 16, "greaterInfusion");
        PsiAPI.setGroupRequirements("negativeEffects", 17, "positiveEffects");
        PsiAPI.setGroupRequirements("exosuitCasting", 19, "greaterInfusion");
        PsiAPI.setGroupRequirements("trignometry", 20, "greaterInfusion");
        PsiAPI.setGroupRequirements("smeltery", 20, "greaterInfusion");
        PsiAPI.setGroupRequirements("flowControl", 20, "greaterInfusion");
        PsiAPI.setGroupRequirements("blockConjuration", 20, "greaterInfusion");
        PsiAPI.setGroupRequirements("detectionDynamics", 21, "flowControl");
        PsiAPI.setGroupRequirements("memoryManagement", 21, "flowControl");
        PsiAPI.setGroupRequirements("secondaryOperators", 21, "trignometry");
        PsiAPI.setGroupRequirements("eidosReversal", 24, "detectionDynamics", "memoryManagement", "exosuitCasting");
    }
}
